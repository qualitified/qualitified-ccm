/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.14
 * Generated at: 2019-12-28 09:16:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ui;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.lang.management.ManagementFactory;
import org.nuxeo.common.Environment;
import org.nuxeo.runtime.api.Framework;
import org.nuxeo.runtime.services.config.ConfigurationService;
import org.nuxeo.ecm.web.resources.api.Resource;
import org.nuxeo.ecm.web.resources.api.ResourceContextImpl;
import org.nuxeo.ecm.web.resources.api.service.WebResourceManager;
import org.nuxeo.ecm.core.api.repository.RepositoryManager;
import org.nuxeo.common.utils.UserAgentMatcher;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/ui/index.css", Long.valueOf(1577524555000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.nuxeo.ecm.web.resources.api.service.WebResourceManager");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.nuxeo.common.Environment");
    _jspx_imports_classes.add("org.nuxeo.common.utils.UserAgentMatcher");
    _jspx_imports_classes.add("org.nuxeo.ecm.web.resources.api.Resource");
    _jspx_imports_classes.add("org.nuxeo.runtime.api.Framework");
    _jspx_imports_classes.add("org.nuxeo.ecm.core.api.repository.RepositoryManager");
    _jspx_imports_classes.add("java.lang.management.ManagementFactory");
    _jspx_imports_classes.add("org.nuxeo.runtime.services.config.ConfigurationService");
    _jspx_imports_classes.add("org.nuxeo.ecm.web.resources.api.ResourceContextImpl");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\n");
      out.write("@license\n");
      out.write("(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n");
      out.write("\n");
      out.write("Licensed under the Apache License, Version 2.0 (the \"License\");\n");
      out.write("you may not use this file except in compliance with the License.\n");
      out.write("You may obtain a copy of the License at\n");
      out.write("\n");
      out.write("    http://www.apache.org/licenses/LICENSE-2.0\n");
      out.write("\n");
      out.write("Unless required by applicable law or agreed to in writing, software\n");
      out.write("distributed under the License is distributed on an \"AS IS\" BASIS,\n");
      out.write("WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");
      out.write("See the License for the specific language governing permissions and\n");
      out.write("limitations under the License.\n");
      out.write("-->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
 WebResourceManager wrm = Framework.getService(WebResourceManager.class); 
      out.write('\n');
 RepositoryManager rm = Framework.getService(RepositoryManager.class); 
      out.write('\n');
 ConfigurationService cs = Framework.getService(ConfigurationService.class); 
      out.write('\n');
 String ua = request.getHeader("user-agent"); 
      out.write('\n');
 String context = request.getContextPath(); 
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"\">\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"description\" content=\"\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("\n");
      out.write("  <title>");
      out.print( Framework.getProperty(Environment.PRODUCT_NAME) );
      out.write("</title>\n");
      out.write("\n");
      out.write("  <!-- Chrome for Android theme color -->\n");
      out.write("  <meta name=\"theme-color\" content=\"#2E3AA1\">\n");
      out.write("\n");
      out.write("  <!-- Web Application Manifest -->\n");
      out.write("  <link rel=\"manifest\" href=\"manifest.json\" crossOrigin=\"use-credentials\">\n");
      out.write("\n");
      out.write("  <!-- Tile color for Win8 -->\n");
      out.write("  <meta name=\"msapplication-TileColor\" content=\"#3372DF\">\n");
      out.write("\n");
      out.write("  <!-- Add to homescreen for Chrome on Android -->\n");
      out.write("  <meta name=\"mobile-web-app-capable\" content=\"yes\">\n");
      out.write("  <meta name=\"application-name\" content=\"Nuxeo\">\n");
      out.write("\n");
      out.write("  <link rel=\"icon\" sizes=\"32x32\" href=\"images/touch/favicon-32x32.png\" type=\"image/png\">\n");
      out.write("  <link rel=\"icon\" sizes=\"16x16\" href=\"images/touch/favicon-16x16.png\" type=\"image/png\">\n");
      out.write("  ");
 if (UserAgentMatcher.isMSEdge(ua)) { 
      out.write("\n");
      out.write("  <link rel=\"shortcut icon\" href=\"");
      out.print(context);
      out.write("/icons/favicon.ico\" type=\"image/x-icon\">\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("  <!-- Safari pinned tab icon -->\n");
      out.write("  <link rel=\"mask-icon\" href=\"images/touch/safari-pinned-tab.svg\" color=\"#0066ff\">\n");
      out.write("\n");
      out.write("  <!-- Add to homescreen for Safari on iOS -->\n");
      out.write("  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n");
      out.write("  <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n");
      out.write("  <meta name=\"apple-mobile-web-app-title\" content=\"Nuxeo\">\n");
      out.write("  <link rel=\"apple-touch-icon\" href=\"images/touch/apple-touch-icon.png\">\n");
      out.write("\n");
      out.write("  <!-- Tile icon for Win8 (144x144) -->\n");
      out.write("  <meta name=\"msapplication-TileImage\" content=\"images/touch/ms-touch-icon-144x144-precomposed.png\">\n");
      out.write("\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" />\n");
      out.write("\n");
      out.write("  <style>\n");
      out.write("    ");
      out.write("html{--nuxeo-sidebar-background:#060606;--nuxeo-page-background:#f5f5f5;--nuxeo-app-header-background:#fff;}body{margin:0;}nuxeo-app[unresolved]{display:block;position:absolute;width:100%;height:100%;filter:grayscale(100%);}[unresolved] #sidebar{background-color:var(--nuxeo-sidebar-background);width:52px;height:100%;float:left;}[unresolved] #sidebar img{width:100%;animation:glow 1s infinite alternate;}[unresolved] #container{background-color:var(--nuxeo-page-background);float:left;width:calc(100% - 52px);height:100%;}[unresolved] #toolbar{background-color:var(--nuxeo-app-header-background);width:100%;height:53px;box-shadow:1px 0 0 rgba(0, 0, 0, 0.1) inset, 0 3px 5px rgba(0,0,0,0.1);}[unresolved] #loading{position:fixed;top:45%;left:50%;}[unresolved] #loading:after{overflow:hidden;display:inline-block;-webkit-animation:ellipsis steps(4,end) 1s infinite;animation:ellipsis steps(4,end) 1s infinite;content:'\\2026';width:0px;font-size:64pt;font-family:'Courier New';opacity:0.2;line-height:1em;}@keyframes glow{from{opacity:1;}to{opacity:0.4;}}@keyframes ellipsis{to{width:48pt;}}@media (max-width: 720px){[unresolved] #sidebar{display:none;}[unresolved] #container{width:100%;}}");
      out.write("\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("  <nuxeo-connection url=\"");
      out.print( context );
      out.write("\"\n");
      out.write("                    repository-name=\"");
      out.print( rm.getDefaultRepositoryName() );
      out.write("\"></nuxeo-connection>\n");
      out.write("  <nuxeo-app base-url=\"");
      out.print( request.getRequestURI() );
      out.write("\"\n");
      out.write("             product-name=\"");
      out.print( Framework.getProperty(Environment.PRODUCT_NAME) );
      out.write("\" unresolved>\n");
      out.write("    <div id=\"sidebar\">\n");
      out.write("      <img src=\"themes/default/logo.png\">\n");
      out.write("    </div>\n");
      out.write("    <div id=\"container\">\n");
      out.write("      <div id=\"toolbar\">\n");
      out.write("      </div>\n");
      out.write("      <span id=\"loading\"></span>\n");
      out.write("    </div>\n");
      out.write("  </nuxeo-app>\n");
      out.write("\n");
      out.write("  <script src=\"bower_components/webcomponentsjs/webcomponents-loader.js\"></script>\n");
      out.write("\n");
      out.write("  <script defer src=\"bower_components/nuxeo-ui-elements/widgets/alloy/alloy-editor-all.js\"></script>\n");
      out.write("\n");
      out.write("  <script>\n");
      out.write("    var Nuxeo = Nuxeo || {};\n");
      out.write("    Nuxeo.UI = Nuxeo.UI || {};\n");
      out.write("    Nuxeo.UI.config = ");
      out.print( cs.getPropertiesAsJson("org.nuxeo.web.ui") );
      out.write(";\n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("  ");
 for (Resource resource : wrm.getResources(new ResourceContextImpl(), "web-ui", "import")) { 
      out.write("\n");
      out.write("  <link rel=\"import\" href=\"");
      out.print( context );
      out.print( resource.getURI() );
      out.write("\">\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("  <!-- routing -->\n");
      out.write("  <link rel=\"import\" href=\"routing.html\">\n");
      out.write("\n");
      out.write("  ");
 if (!Framework.isDevModeSet()) { 
      out.write("\n");
      out.write("  <script>\n");
      out.write("    if ('serviceWorker' in navigator) {\n");
      out.write("      window.addEventListener('load', function () {\n");
      out.write("        navigator.serviceWorker.register('sw.js?ts=");
      out.print( ManagementFactory.getRuntimeMXBean().getStartTime() );
      out.write("');\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("  </script>\n");
      out.write("  ");
 } 
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
